| package |
package := Package name: 'RcsSourceManager'.
package paxVersion: 0;
	basicComment: 'Copyright (c) 2002-2004 Robert Jarvis

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

13-Oct-2003  Revised RcsSourceManager>>basicExecuteCommand:inDirectory:waitForSeconds: to eliminate messages caused by trying to delete non-existant files.

26-Feb-2004  Revised RcsSourceManager>>basicCheckOut:lock: to preserve the modification time on checked-out files.  This eliminates spurious warning messages generated by Dolphin.'.

package basicScriptAt: #postinstall put: 'RcsSourceManager newDefault'.
package basicScriptAt: #preuninstall put: 'SourceManager newDefault'.

package classNames
	add: #RcsSourceManager;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package allResourceNames: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\..\Object Arts\Dolphin\Base\Dolphin';
	add: '..\ExternalProcess\ExternalProcess';
	add: '..\KernelLibraryExtensions\KernelLibraryExtensions';
	add: '..\VersioningSourceManager\VersioningSourceManager';
	yourself).

package!

"Class Definitions"!

VersioningSourceManager subclass: #RcsSourceManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'Win32Constants'
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

"End of package definition"!

"Source Globals"!

"Classes"!

RcsSourceManager guid: (GUID fromString: '{883AEC40-C63E-11D4-BDF7-00010240D5E2}')!
RcsSourceManager comment: ''!
!RcsSourceManager categoriesForClass!Unclassified! !
!RcsSourceManager methodsFor!

basicCheckOut: aStringFilepath lock: aBooleanLockFlag
	"Private - Check out aStringFilename.  Signal an error if unsuccessful. "

	| directoryName filename lockFlagString resultString |

	directoryName := self directoryFrom: aStringFilepath.
	self createRcsDirectoryIn: directoryName.
	filename := self filenameFrom: aStringFilepath.

	aBooleanLockFlag
		ifTrue: [ lockFlagString := '-l' ]
		ifFalse: [ lockFlagString := '' ].

	"Execute the checkout command."

	^self executeCommand: 'co -M ', lockFlagString, ' "', filename, '"'
			inDirectory: directoryName
			waitForSeconds: 20!

basicExecuteCommand: aStringCommand inDirectory: aDirectoryString waitForSeconds: anIntegerSeconds
	"Execute a command by launching a separate process."

	| tmpStdinName tmpStdoutName tmpStderrName tmpFile text process startTemps endTemps diffTemps |

	startTemps := (File find: aDirectoryString, '\_*') collect: [ :aWin32FindData | aWin32FindData fileName ].

	text := ''.

	tmpStdinName := File temporaryFilename.
	tmpStdoutName := File temporaryFilename.
	tmpStderrName := File temporaryFilename.

	process := ExternalProcess new
				commandLine: aStringCommand;
				directory: aDirectoryString;
				secondsToWait: anIntegerSeconds;
				stdinFilename: tmpStdinName;
				stdoutFilename: tmpStdoutName;
				stderrFilename: tmpStderrName;
				yourself.

	[ process executeSync ]
		on: ExternalProcessWaitFailure do: [ :e | text := 'Unable to wait for the command to complete' ]
		on: ExternalProcessWaitTimeout do: [ :e | text := 'The command issued did not terminate.  This may ',
									'be because of a problem with the read-only attributes ',
									'on the files involved.' ]
		on: Error do: [ :e | text := 'An ', e class name, ' error occurred, error text=', e description ].

	tmpFile := FileStream read: tmpStderrName.
	text := text, tmpFile contents.
	tmpFile close.

	File delete: tmpStdinName.
	File delete: tmpStdoutName.
	File delete: tmpStderrName.

	endTemps := (File find: aDirectoryString, '\_*') collect: [ :aWin32FindData | aWin32FindData fileName ].
	diffTemps := endTemps difference: startTemps.
	diffTemps do:
		[ :aFilename |
		"Files sometimes disappear like magic!!"
		(File exists: aFilename) ifTrue: [ File delete: aFilename ] ].

	^text!

checkIn: aSourceObject withComment: aStringComment
	"Private - Check in aSourceObject.  Signal an error if unsuccessful."

	| directoryName filename |

	"Transcript show: 'RcsSourceManager>>checkIn: ', aStringFilepath, ' withComment: ', aStringComment; cr."

	(self isFileCheckedOut: aSourceObject fileOutName)
		ifTrue:
			[ aSourceObject fileOut.
			directoryName := self directoryFrom: aSourceObject fileOutName.
			self createRcsDirectoryIn: directoryName.
			filename := self filenameFrom: aSourceObject fileOutName.

			"Execute the check-in command, answering the text results of the check-in command."

			^self executeCommand: 'ci -u -m"', aStringComment, '" -t-"Initial version" "', filename, '"'
					inDirectory: directoryName
					waitForSeconds: 20 ]
		ifFalse: [ ^'' ]!

checkOut: aStringFilepath
	| checkoutResults |

	checkoutResults := ''.

	((File exists: aStringFilepath) and: [ (self isFileCheckedOut: aStringFilepath) not ]) ifTrue:
		[" Transcript show: 'RcsSourceManager>>checkOut: Checking out ', aStringFilepath; cr."
		checkoutResults := self basicCheckOut: aStringFilepath lock: true ].
	^checkoutResults!

createRcsDirectoryIn: aStringDirectoryName
	| subDirs |

	"Private - Collect the names of the subdirectories where the file is being checked in."

	subDirs :=  OrderedCollection new.
	File forDirectoriesIn: aStringDirectoryName do: [ :each | subDirs add: each fileName ].

	"Create the RCS subdirectory if it doesn't exist."

	(subDirs anySatisfy: [ :each | each asLowercase = 'rcs' ]) ifFalse: [
		File createDirectory: aStringDirectoryName, 'rcs' ].

!

directoryFrom: aStringFilename
	"Private - Extract the directory from aStringFilename."

	^((aStringFilename indexOfAnyOf: '\' startingAt: 1) >0
		ifTrue: [aStringFilename leftString: (aStringFilename size - (aStringFilename reverse indexOfAnyOf: '\' startingAt: 1)+1)]
		ifFalse: [ '.\' ]).!

driveFrom: aDirectoryString
	(aDirectoryString at: 2) = $:
		ifTrue: [ ^aDirectoryString leftString: 2 ]
		ifFalse: [ ^'' ]!

executeCommand: aStringCommand inDirectory: aDirectoryString waitForSeconds: anIntegerSeconds
	^self basicExecuteCommand: aStringCommand
			inDirectory: aDirectoryString
			waitForSeconds: anIntegerSeconds!

filenameFrom: aStringFilepath
	^(aStringFilepath reverse upTo: $\) reverse!

get: aStringFilepath
	"Get the latest version of aStringFilepath from the receiver.  Answer the"
	"results of the SCCS 'get' command."

	^self basicCheckOut: aStringFilepath lock: false!

isFileCheckedOut: aFilenameString
	^File isWriteable: aFilenameString!

resultsContainErrors: aString
	| lines |

	lines := aString lines.
	2 to: lines size do: [ :n |
		((lines at: n) asLowercase indexOfSubCollection: 'error') >0
			ifTrue: [ ^true ] ].
	^false! !
!RcsSourceManager categoriesFor: #basicCheckOut:lock:!private!source code control! !
!RcsSourceManager categoriesFor: #basicExecuteCommand:inDirectory:waitForSeconds:!operations!private! !
!RcsSourceManager categoriesFor: #checkIn:withComment:!private!source code control! !
!RcsSourceManager categoriesFor: #checkOut:!private!source code control! !
!RcsSourceManager categoriesFor: #createRcsDirectoryIn:!operations!private! !
!RcsSourceManager categoriesFor: #directoryFrom:!helpers!private! !
!RcsSourceManager categoriesFor: #driveFrom:!private!private helpers! !
!RcsSourceManager categoriesFor: #executeCommand:inDirectory:waitForSeconds:!operations!private! !
!RcsSourceManager categoriesFor: #filenameFrom:!private!private helpers! !
!RcsSourceManager categoriesFor: #get:!public!source code control! !
!RcsSourceManager categoriesFor: #isFileCheckedOut:!public!testing! !
!RcsSourceManager categoriesFor: #resultsContainErrors:!public! !

!RcsSourceManager class methodsFor!

referencesToOtherPackages
	"Private - Force references to other packages."
	KernelLibraryExtension		"Global defined in the KernelLibraryExtension package"! !
!RcsSourceManager class categoriesFor: #referencesToOtherPackages!Dependencies!private! !

"Binary Globals"!

"Resources"!

