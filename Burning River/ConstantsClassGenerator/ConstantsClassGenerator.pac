| package |
package := Package name: 'ConstantsClassGenerator'.
package paxVersion: 0;
	basicComment: 'Copyright (c) 2002-2004 Robert Jarvis

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'.


package classNames
	add: #ConstantsClassGenerator;
	add: #PlainConstantsClassGenerator;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package allResourceNames: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\..\Object Arts\Dolphin\Base\Dolphin';
	yourself).

package!

"Class Definitions"!

Object subclass: #ConstantsClassGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ConstantsClassGenerator subclass: #PlainConstantsClassGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

"End of package definition"!

"Source Globals"!

"Classes"!

ConstantsClassGenerator guid: (GUID fromString: '{2B837870-5592-11D3-8269-00001D19F5C2}')!
ConstantsClassGenerator comment: 'This class extracts defined constants from a group of C header files and generates a Smalltalk file (.st) with a method for each constant found in the headers.  The purpose of this is to help eliminate the use of pool dictionaries.  Note that the generated file may require manual editing as the conversion may not be 100% accurate.'!
!ConstantsClassGenerator categoriesForClass!No category! !
!ConstantsClassGenerator methodsFor!

generateBoilerplate: classNameString on: outStream
	"Private - generate boilerplate for the class"

	outStream
		nextPutAll: '"Generated by ', self class name, ' class"!!'; cr; cr;
		nextPutAll: 'Object subclass: #', classNameString; crtab;
		nextPutAll: 	'instanceVariableNames: '' '''; crtab;
		nextPutAll: 	'classVariableNames: ''Current'''; crtab;
		nextPutAll: 	'poolDictionaries: '' ''!!'; cr; cr;
		nextPutAll: classNameString, ' class instanceVariableNames: '' ''!!'; cr; cr;
		nextPutAll: '!!', classNameString, ' class methodsFor!!'; cr; cr;
		nextPutAll: 'current';crtab;
		nextPutAll: 	'Current isNil ifTrue: [ Current := self new ].'; crtab; tab;
		nextPutAll: 		'^Current!!'; cr; cr;
		nextPutAll: 'uninstall'; crtab;
		nextPutAll: 	'Current := nil!! !!'; cr; cr;
		nextPutAll: '!!', classNameString, ' methodsFor!!'; cr; cr.!

generateClass: classNameString from: fileNameCollection
	| outStream |

	outStream := FileStream write: classNameString, '.st' text: true.

	self generateBoilerplate: classNameString on: outStream.
	fileNameCollection do: [ :aFilename | self generateConstantsFrom: aFilename on: outStream ].

	outStream
		nextPut: $!!;
		close!

generateConstantsFrom: aFilename on: outStream
	"Private - generate Smalltalk code for the defined constants in aFilename, writing methods to outStream"

	| inStream line tokenArray state name value |

	inStream := FileStream read: aFilename.

	[ inStream atEnd ] whileFalse: [
		line := inStream nextLine.
		line := line copyReplaceAll: String tab with: ' '.
		tokenArray := line subStrings.
		state := 1.

		"State	Meaning
		    1		Find the next #define
		    2		Next token is a constant name
		    3		Next token is a constant value"

		tokenArray do: [ :token |
			state = 3 ifTrue: [	"Current token is the value of a constant"
				value := self translateValue: token.

				(name size > 0) & (value size > 0) ifTrue: [
					outStream
						nextPutAll: name; crtab;
						nextPut: $^;
						nextPutAll: value;
						nextPut: $!!; cr; cr ].
				state := 1 ].

			state = 2 ifTrue: [	"Current token is a constant name"
				name := self translateName: token.
				state := 3 ].

			state = 1 ifTrue: [	"Wait for a #define"
				token = '#define' ifTrue: [
					state := 2 ] ] ].

			state = 1 ifFalse: [ outStream cr ] ].  "[inStream atEnd] whileFalse:"

	inStream close!

translateName: aString
	"Private - Translate the C-style identifier (e.g. BLAH_BLAH_BLAH) to a Smalltalk-style
	 identifier (blahBlahBlah)."

	| tempString charState |

	charState := 2.
	tempString := ''.

	"charState	Meaning
		0		Shift state to 1
		1		Copy next character as capital
		2		Copy next character as lowercase, eliminating underscores"

	aString do: [ :aCharacter |
		charState = 2 ifTrue: [
			aCharacter asString = '_'
				ifTrue: [ charState := 0 ]
				ifFalse: [ tempString := tempString, aCharacter asLowercase asString ] ].
		charState = 1 ifTrue: [
			tempString := tempString, aCharacter asString.
			charState := 2 ].
		charState = 0 ifTrue: [
			charState := 1 ] ].

	^tempString!

translateValue: aString
	"Private - translate C-style values to Smalltalk-style values."

	| tempString workString |

	tempString := aString.      "Simple case"

	(aString at: 1) isDigit ifTrue: [
		((aString size > 2) and: [(aString copyFrom: 1 to: 2) = '0x'])	"Hex number" 
			ifTrue: [
				tempString := '16r'.
				workString := aString copyFrom: 3 to: aString size.
				workString do: [ :aCharacter |
					aCharacter isHexDigit ifTrue: [
						tempString := tempString, aCharacter asString ] ] ]
			ifFalse: [      "Decimal constant"
				tempString := ''.
				aString do: [ :aCharacter |
					aCharacter isDigit ifTrue: [
						tempString := tempString, aCharacter asString ] ] ] ].

	((tempString leftString: 1) = '"') & ((tempString rightString: 1) = '"')
		ifTrue: [ tempString := '''', (tempString midString: tempString size - 2 from: 2), '''' ].

	^tempString! !
!ConstantsClassGenerator categoriesFor: #generateBoilerplate:on:!private!private helpers! !
!ConstantsClassGenerator categoriesFor: #generateClass:from:!class generation!public! !
!ConstantsClassGenerator categoriesFor: #generateConstantsFrom:on:!private!private helpers! !
!ConstantsClassGenerator categoriesFor: #translateName:!private!private helpers! !
!ConstantsClassGenerator categoriesFor: #translateValue:!private!private helpers! !

PlainConstantsClassGenerator guid: (GUID fromString: '{78315206-125E-11D5-BE08-00010240D5E2}')!
PlainConstantsClassGenerator comment: ''!
!PlainConstantsClassGenerator categoriesForClass!Unclassified! !
!PlainConstantsClassGenerator methodsFor!

translateName: aString
	"Private - Translate the C-style identifier (e.g. BLAH_BLAH_BLAH) to a Smalltalk-style
	 identifier (blahBlahBlah).  In this subclass we don't do any translation - instead, we preserve
	the C-style format of the identifier."

	^aString! !
!PlainConstantsClassGenerator categoriesFor: #translateName:!private!private helpers! !

"Binary Globals"!

"Resources"!

